import crypto from 'node:crypto'
import fs from 'node:fs'
import path from 'node:path'
import { type Client, sql } from 'pg-nano'
import { group, memo, sift, tryit } from 'radashi'
import type { Env } from './env'
import { parseIdentifier, type SQLIdentifier } from './parseIdentifier'
import { dedent } from './util/dedent'

type SQLObject = {
  id: SQLIdentifier
  type: string
  stmtIndex: number
}

type SQLFunc = SQLObject & { signature: string }

export async function prepareForMigration(filePaths: string[], env: Env) {
  const client = await env.client

  fs.rmSync(env.schemaDir, { recursive: true, force: true })
  fs.mkdirSync(env.schemaDir, { recursive: true })

  const { pre: prePlanFiles, rest: schemaFiles = [] } = group(
    filePaths,
    file => {
      const name = path.basename(file)
      return name[0] === '!' ? 'pre' : 'rest'
    },
  )

  let prePlanDDL = dedent`
    SET check_function_bodies = off;\n\n
  `

  if (prePlanFiles) {
    prePlanDDL +=
      prePlanFiles.map(file => fs.readFileSync(file, 'utf8')).join('\n\n') +
      '\n\n'
  }

  const parsedSchemaFiles = schemaFiles.map(file => {
    const stmts = splitStatements(fs.readFileSync(file, 'utf8'))
    const objects = stmts.map((stmt, stmtIndex) => {
      const match = stmt.match(
        /(?:^|\n)CREATE\s+(?:OR\s+REPLACE\s+)?(\w+)\s+(?:IF\s+NOT\s+EXISTS\s+)?(.+?)\s+(?:AS\b|ON\b|\()/i,
      )
      if (match) {
        let [, type, id] = match
        type = type.toLowerCase()

        return {
          id: parseIdentifier(id),
          type,
          stmtIndex,
        }
      }
      return null
    })
    return { file, stmts, objects }
  })

  const doesObjectExist = memo(async (object: SQLObject) => {
    if (object.type === 'table') {
      return await client.scalar<boolean>(sql`
        SELECT EXISTS (
          SELECT 1
          FROM pg_tables
          WHERE schemaname = ${object.id.schemaVal}
            AND tablename = ${object.id.nameVal}
        );
      `)
    }
    if (object.type === 'type') {
      return await client.scalar<boolean>(sql`
        SELECT EXISTS (
          SELECT 1
          FROM pg_type
          WHERE typname = ${object.id.nameVal}
            AND typnamespace = ${object.id.schemaVal}::regnamespace
        );
      `)
    }
    return false
  })

  const schemaObjects = parsedSchemaFiles.flatMap(({ objects }) =>
    sift(objects),
  )

  for (const { file, stmts, objects } of parsedSchemaFiles) {
    const outFile = path.join(
      env.schemaDir,
      path.basename(file, path.extname(file)) +
        '.' +
        md5Hash(file).slice(0, 8) +
        '.sql',
    )

    const stubbedTables = new Set<SQLObject>()
    const unhandledStmts: string[] = []

    for (let i = 0; i < stmts.length; i++) {
      const stmt = stmts[i]
      const object = objects[i]
      if (!object) {
        unhandledStmts.push(stmt)
        continue
      }
      if (object.type === 'function') {
        const matchedSetOf = /\bRETURNS\s+SETOF\s+(.+?)\s+AS\b/i.exec(stmt)

        // When a function uses SETOF with a table identifier, that table may
        // not exist before pg-schema-diff creates the function. This issue is
        // tracked by https://github.com/stripe/pg-schema-diff/issues/129.
        //
        // Therefore, we need to ensure the table exists before applying the
        // migration plan generated by pg-schema-diff.
        if (matchedSetOf) {
          const referencedId = parseIdentifier(matchedSetOf[1])
          const referencedTable = schemaObjects.find(
            obj => obj.type === 'table' && obj.id.compare(referencedId),
          )

          if (
            referencedTable &&
            !stubbedTables.has(referencedTable) &&
            !(await doesObjectExist(referencedTable))
          ) {
            // Use an empty table as a placeholder to avoid reference errors.
            await client.query(sql`
              CREATE TABLE ${referencedId.toSQL()} (tmp int);
              ALTER TABLE ${referencedId.toSQL()} DROP COLUMN tmp;
            `)
            stubbedTables.add(referencedTable)
          }
        }
      }
      // Non-enum types are not supported by pg-schema-diff, so we need to
      // diff them manually.
      else if (object.type === 'type' && !stmt.match(/\bAS\s+ENUM\b/i)) {
        const typeExists = await doesObjectExist(object)
        if (!typeExists) {
          await client.query(sql.unsafe(stmt))
          stmts[i] = ''
        } else if (await hasTypeChanged(client, object, stmt)) {
          await client.query(sql`
            DROP TYPE ${object.id.toSQL()} CASCADE;
            ${sql.unsafe(stmt)}
          `)
        }
      }
    }

    tryit(fs.unlinkSync)(outFile)
    fs.writeFileSync(outFile, sift(stmts).join('\n\n'))
  }

  await client.query(sql`
    DROP SCHEMA IF EXISTS nano CASCADE;
  `)

  const prePlanFile = path.join(env.untrackedDir, 'pre-plan.sql')
  fs.writeFileSync(prePlanFile, prePlanDDL)

  return async () => {}
}

function md5Hash(input: string): string {
  return crypto.createHash('md5').update(input).digest('hex')
}

/**
 * Compare a type to the existing type in the database.
 *
 * @returns `true` if the type has changed, `false` otherwise.
 */
async function hasTypeChanged(client: Client, type: SQLObject, stmt: string) {
  const tmpId = type.id.withSchema('nano')
  const tmpStmt = type.id.schema
    ? stmt.replace(type.id.schema, 'nano')
    : stmt.replace(type.id.name, 'nano.' + type.id.name)

  // Add the current type to the database (but under the "nano" schema), so we
  // can compare it to the existing type.
  await client.query(sql`
    CREATE SCHEMA IF NOT EXISTS nano;
    DROP TYPE IF EXISTS ${tmpId.toSQL()} CASCADE;
    ${sql.unsafe(tmpStmt)}
  `)

  const selectTypeById = (id: SQLIdentifier) => sql`
    SELECT
      a.attname AS column_name,
      a.atttypid AS type_id,
      a.attnum AS column_number
    FROM
      pg_attribute a
    JOIN
      pg_type t ON t.oid = a.attrelid
    WHERE
      t.typname = ${id.nameVal}
      AND t.typnamespace = ${id.schemaVal}::regnamespace
    ORDER BY
      a.attnum
  `

  const hasChanges = await client.scalar<boolean>(
    sql`
      WITH type1 AS (
        ${selectTypeById(type.id)}
      ),
      type2 AS (
        ${selectTypeById(tmpId)}
      )
      SELECT 
        EXISTS (
          SELECT 1
          FROM (
            SELECT * FROM type1
            EXCEPT
            SELECT * FROM type2
          ) diff1
        ) OR
        EXISTS (
          SELECT 1
          FROM (
            SELECT * FROM type2
            EXCEPT
            SELECT * FROM type1
          ) diff2
        ) AS has_changes;
    `,
  )

  return hasChanges
}

/**
 * Split a string of SQL statements into individual statements. This assumes
 * your SQL is properly indented.
 */
function splitStatements(stmts: string): string[] {
  const regex = /;\s*\n(?=\S)/g
  const statements = stmts.split(regex)
  return statements.map(stmt => stmt.trim() + ';')
}
